{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Faces","_ref","face","index","handleCopy","react_default","a","createElement","className","readOnly","onClick","value","counter","App","_useState","useState","_useState2","Object","slicedToArray","faces","setFaces","document","querySelectorAll","select","execCommand","newFaces","toConsumableArray","class","href","id","map","App_Faces","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b26d6203.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Faces = ({ face, index, handleCopy }) => {\n\treturn (\n\t\t<li className=\"collection-item center\">\n\t\t\t<input\n\t\t\t\treadOnly\n\t\t\t\tclassName=\"title center-align btn z-depth-2 black-text \"\n\t\t\t\tonClick={() => {\n\t\t\t\t\thandleCopy(index);\n\t\t\t\t}}\n\t\t\t\tvalue={face.face}\n\t\t\t/>\n\n\t\t\t<p className=\"\">Copied {face.counter} times</p>\n\t\t</li>\n\t);\n};\n\nfunction App() {\n\tconst [faces, setFaces] = useState([\n\t\t{ face: \"( ͡° ͜ʖ ͡°)\", counter: 0 },\n\t\t{ face: \"¯\\\\_(ツ)_/¯\", counter: 0 },\n\t\t{ face: \"( ͡°( ͡° ͜ʖ( ͡° ͜ʖ ͡°)ʖ ͡°) ͡°)\", counter: 0 },\n\t\t{ face: \"ʕ•ᴥ•ʔ\", counter: 0 },\n\t\t{ face: \"(▀̿Ĺ̯▀̿ ̿)\", counter: 0 },\n\t\t{ face: \"(ง ͠° ͟ل͜ ͡°)ง\", counter: 0 },\n\t\t{ face: \"┬┴┬┴┤ ͜ʖ ͡°) ├┬┴┬┴\", counter: 0 },\n\t\t{ face: \"(ᵔᴥᵔ)\", counter: 0 },\n\t\t{ face: \"◉_◉\", counter: 0 },\n\t\t{ face: \"(._.) ( l: ) ( .-. ) ( :l ) (._.)\", counter: 0 }\n\t]);\n\n\tconst handleCopy = index => {\n\t\tlet copy = document.querySelectorAll(\"input\")[index];\n\t\tcopy.select();\n\t\tdocument.execCommand(\"copy\");\n\t\tlet newFaces = [...faces];\n\t\tnewFaces[index].counter += 1;\n\t\tsetFaces(newFaces);\n\n\t};\n\treturn (\n    <div className=\"container\">\n\t\t<nav>\n\t\t\t<div class=\"nav-wrapper blue\">\n\t\t\t<a href=\"#faces\" class=\"brand-logo center\">\n\t\t\t\tASCII FACES\n\t\t\t</a>\n\t\t\t</div>\n\t\t</nav>\n\t\t<ul id=\"faces\" className=\"collection with-header\">\n\t\t\t<li className=\"collection-header\">\n\t\t\t<h5>Click on a face down below  to copy</h5>\n\t\t\t</li>\n\t\t\t{faces.map((face, index) => (\n\t\t\t<Faces\n\t\t\t\tindex={index}\n\t\t\t\tkey={index}\n\t\t\t\tface={face}\n\t\t\t\thandleCopy={handleCopy}\n\t\t\t/>\n\t\t\t))}\n\t\t</ul>\n\t\t</div>\n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}